name: Build & Deploy Infra/App
on: [ push ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  TF_VAR_vpc_id: ${{ secrets.AWS_VPC_ID }}
  K8S_CLUSTER_NAME: eks-cluster

jobs:
  # Job to build, test and push the container image to GHCR
  build-image-and-push:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Container Image
        run: docker build . -t ghcr.io/${{ github.repository_owner }}/liatrio-app-${{ github.ref_name }}:latest
      
      - name: Login to ghcr.io
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: docker push ghcr.io/${{ github.repository_owner }}/liatrio-app-${{ github.ref_name }}:latest

  # Job to deploy the infrastructure using Terraform
  deploy-infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: tf init
        run: terraform init

      - name: tf validate
        run: terraform validate

      - name: tf plan
        run: terraform plan -no-color

      - name: tf apply
        if: github.ref_name == 'main'
        run: terraform apply -auto-approve -no-color

  # Job to deploy app to k8s
  deploy-app:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: helm
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate kubeconfig
        run: aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $K8S_CLUSTER_NAME
      
      - name: Deploy app 
        run: helm install -f values.yaml --set image.branchName=${{ github.ref_name }} k8s-app .

      - name: SetApiURL
        run: echo "::set-output name=apiUrl::$(kubectl -n demo get svc k8s-app-service -o jsonpath='{.status.loadBalancer.ingress[*].hostname}')"
    outputs:
      apiUrl: ${{ steps.SetApiURL.outputs.apiUrl }}

  # Job that execuste performance/automated tests
  performance-tests: 
    needs: deploy-app
    runs-on: ubuntu-latest
    env:
      API_URL: ${{ needs.deploy-app.outputs.apiUrl }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run k6 tests (perf/automated)
        uses: grafana/k6-action@v0.2.0
        with:
          filename: tests/performance/script.js

  # Job to destroy the infrastructure
  destroy-infrastructure:
    needs: performance-tests
    if: ${{ always() }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate kubeconfig
        run: aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $K8S_CLUSTER_NAME
      
      # Necessary to destroy load balancers
      - name: Delete app 
        run: echo "App 'deleted' ;) !"
        # run: helm del k8s-app

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: tf init
        run: terraform init

      - name: tf validate
        run: terraform validate

      - name: tf destroy
        if: github.ref_name == 'main'
        run: echo "Infra 'destroyed' ;) !"
        # run: terraform destroy -auto-approve -no-color